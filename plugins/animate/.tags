!_TAG_FILE_SORTED	2	/0=unsorted, 1=sorted, 2=foldcase/
Fade	/home/ilex/work/fire/plugins/animate/fade.cpp	/^Fade<FadeIn>::Fade (FireWindow _win) : win(_win), run(true) {$/;"	f	language:C++	class:Fade
Fade	/home/ilex/work/fire/plugins/animate/fade.cpp	/^Fade<FadeOut>::Fade (FireWindow _win) : win(_win), run(true) {$/;"	f	language:C++	class:Fade
fadeDuration	/home/ilex/work/fire/plugins/animate/fade.cpp	/^int fadeDuration;$/;"	v	language:C++
fadeIn	/home/ilex/work/fire/plugins/animate/fade.cpp	/^    bool fadeIn = false; \/\/ used to prevent activation$/;"	m	language:C++	struct:FadeWindowData	file:
fadeOut	/home/ilex/work/fire/plugins/animate/fade.cpp	/^    bool fadeOut = false; \/\/ of fading multiple times$/;"	m	language:C++	struct:FadeWindowData	file:
FadeWindowData	/home/ilex/work/fire/plugins/animate/fade.cpp	/^struct FadeWindowData : public WindowData {$/;"	s	language:C++	file:
Run	/home/ilex/work/fire/plugins/animate/fade.cpp	/^template<> bool Fade<FadeIn>::Run() { return this->run; }$/;"	f	language:C++	class:Fade
Run	/home/ilex/work/fire/plugins/animate/fade.cpp	/^template<> bool Fade<FadeOut>::Run() { return this->run; }$/;"	f	language:C++	class:Fade
Step	/home/ilex/work/fire/plugins/animate/fade.cpp	/^bool Fade<FadeOut>::Step() {$/;"	f	language:C++	class:Fade
Step	/home/ilex/work/fire/plugins/animate/fade.cpp	/^template<> bool Fade<FadeIn>::Step() {$/;"	f	language:C++	class:Fade
~Fade	/home/ilex/work/fire/plugins/animate/fade.cpp	/^template<> Fade<FadeIn>::~Fade() {}$/;"	f	language:C++	class:Fade
~Fade	/home/ilex/work/fire/plugins/animate/fade.cpp	/^template<> Fade<FadeOut>::~Fade() {}$/;"	f	language:C++	class:Fade
